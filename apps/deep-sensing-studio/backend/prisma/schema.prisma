// Asymmetrica Deep-Sensing Studio - Database Schema
// Three-Regime Architecture with Quaternion Support
//
// JULES-03: This schema is the foundational data model for the Deep-Sensing Studio.
// It includes models for documents, entities, sentiments, and embeddings,
// with a focus on performance using appropriate indexes (GIN for JSONB).

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Three-Regime classification enum, based on Asymmetrica Protocol.
/// - Support (α₀): Maximum efficiency, high-confidence data.
/// - Exploration (α₁): High creativity, novel or low-confidence data.
/// - Balance (α₂): Integration and equilibrium between the two.
enum Regime {
  Support
  Exploration
  Balance
}

/// Sentiment classification labels.
enum SentimentLabel {
  positive
  negative
  neutral
}

/// Core model for storing documents and their processed metadata.
model Document {
  id              String   @id @default(cuid())
  content         String
  source_url      String?  // The original URL of the document source
  structured_data Json     @default("{}") // Stores extracted entities (NER) as JSONB.
  confidence      Float    // Harmonic mean confidence score (0-1).
  regime          Regime   // Classified regime for sharding and analysis.
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations to associated data models.
  entities   Entity[]
  sentiments Sentiment[]
  embeddings Embedding[]

  // Indexes for performance optimization.
  @@index([regime]) // Speeds up queries filtered by regime.
  @@index([created_at]) // Optimizes sorting by creation date.
  @@index([structured_data], type: Gin)
}

/// Model for storing Named Entity Recognition (NER) results.
model Entity {
  id             String   @id @default(cuid())
  document_id    String
  entity_type    String // e.g., "PERSON", "ORGANIZATION", "LOCATION"
  entity_value   String // The actual text of the entity.
  confidence     Float
  position_start Int
  position_end   Int

  // Relation to the parent document.
  document Document @relation(fields: [document_id], references: [id], onDelete: Cascade)

  // Index for quickly retrieving all entities for a given document.
  @@index([document_id])
}

/// Model for storing sentiment analysis results.
model Sentiment {
  id              String         @id @default(cuid())
  document_id     String
  sentiment_score Float // Score from -1.0 (negative) to 1.0 (positive).
  sentiment_label SentimentLabel // 'positive', 'negative', or 'neutral'.
  confidence      Float

  // Relation to the parent document.
  document Document @relation(fields: [document_id], references: [id], onDelete: Cascade)

  // Index for quickly retrieving sentiment for a given document.
  @@index([document_id])
}

/// Model for storing quaternion embeddings, linking them to a document.
model Embedding {
  id          String   @id @default(cuid())
  document_id String
  quaternion  Json // The 4D quaternion vector: {a, bi, cj, dk}.
  created_at  DateTime @default(now())

  // Relation to the parent document.
  document Document @relation(fields: [document_id], references: [id], onDelete: Cascade)

  // Index for quickly retrieving embeddings for a given document.
  @@index([document_id])
}

/// User model for future authentication and authorization (Phase 2).
model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String?
  api_key_hash String?   @unique
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}