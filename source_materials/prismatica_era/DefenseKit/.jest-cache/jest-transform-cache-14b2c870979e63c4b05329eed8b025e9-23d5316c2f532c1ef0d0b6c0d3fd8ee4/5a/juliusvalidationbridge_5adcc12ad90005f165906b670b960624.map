{"version":3,"names":["_productionSignatureSystem","require","_persistentLearningEngine","cov_2gzp6e95nm","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","JULIUS_STANDARDS","SIGNIFICANCE_THRESHOLD","CV_FOLDS","CV_CONSISTENCY_THRESHOLD","ELEGANCE_RATIO_THRESHOLD","CONSCIOUSNESS_BALANCE_THRESHOLD","GOLDBACH_ALIGNMENT_THRESHOLD","GOLDBACH_PERFECT_THRESHOLD","AMPLIFICATION_THRESHOLD","RMSE_IMPROVEMENT_THRESHOLD","VALIDATION_PROTOCOLS","STATISTICAL","methodology","requirements","CROSS_VALIDATION","ELEGANCE","CONSCIOUSNESS","JuliusValidationBridge","constructor","config","enableCryptographicSigning","enablePersistentStorage","enableRealTimeValidation","juliusApiEndpoint","signatureSystem","ProductionAEPSignatureSystem","enableMathematicalConsciousness","learningEngine","PersistentLearningEngine","validationHistory","registeredInsights","Map","preRegisterInsight","insight","timestamp","Date","now","insightId","Math","random","toString","substr","registration","id","description","hypothesis","expectedOutcomes","preRegisteredProtocol","status","validationResults","signature","sign","JSON","stringify","set","console","log","validateFormula","formula","testData","get","Error","validation","expression","samples","length","features","Object","keys","target","predictions","map","sample","evaluateFormula","actuals","statisticalSignificance","calculateStatisticalSignificance","crossValidation","performCrossValidation","eleganceMetrics","assessMathematicalElegance","consciousnessAlignment","validateConsciousnessAlignment","goldbachAlignment","validateGoldbachAlignment","juliusValidation","calculateJuliusScore","performance","rmse","calculateRMSE","mae","calculateMAE","r2","calculateR2","amplification","passesJuliusStandard","pValue","score","ratio","integrityVerified","storeLearning","content","breakthrough","significance","push","toExponential","alignmentScore","toFixed","residuals","actual","i","n","mean","reduce","sum","r","variance","standardError","sqrt","tStatistic","abs","normalCDF","max","degreesOfFreedom","effectSize","significanceLevel","folds","foldSize","floor","rmseScores","consistencyScores","fold","testFold","slice","trainFold","consistency","calculateConsistencyMetric","meanRMSE","stdRMSE","meanConsistency","c","passesConsistencyThreshold","complexity","estimateFormulaComplexity","eleganceRatio","symmetryScore","calculateSymmetryScore","explanatoryPower","passesEleganceThreshold","optimalCenter","consciousnessFeatures","consciousnessMetrics","support","exploration","balance","current","distance","currentCenter","passesAlignmentThreshold","goldbachSamples","filter","gb_identical_flag","includesGoldbachFeatures","some","feature","includes","goldbachSampleRatio","passesGoldbachThreshold","perfectAlignment","weights","statistical","consciousness","elegance","goldbach","scores","weightedScore","key","min","overallScore","componentScores","grade","forEach","replace","RegExp","e","mse","actualMean","a","totalSumSquares","residualSumSquares","x","exp","PI","operators","op","split","tokens","uniqueTokens","Set","size","p","exportValidationReport","report","preRegistration","juliusStandards","validationProtocols","exportTimestamp","systemVersion","reportSignature","getValidationStatistics","total","passed","v","breakthroughs","totalValidations","passedValidations","breakthroughDiscoveries","successRate","breakthroughRate","averageAmplification","exports","_default","default"],"sources":["julius-validation-bridge.js"],"sourcesContent":["/**\n * 🔬 JULIUS AI VALIDATION BRIDGE\n *\n * Independent validation component that pre-registers methodologies\n * and validates mathematical insights with Julius AI standards\n *\n * FEATURES:\n * - Pre-registered methodology protocols\n * - Statistical significance validation (p < 0.001 Julius standard)\n * - Cross-validation testing\n * - Mathematical elegance assessment\n * - Consciousness balance scoring\n * - Goldbach alignment verification\n * - Automated insight storage with cryptographic signatures\n */\n\nimport { ProductionAEPSignatureSystem } from '../aep/production-signature-system.js';\nimport { PersistentLearningEngine } from '../aep/persistent-learning-engine.js';\n\n/**\n * JULIUS VALIDATION STANDARDS\n * Pre-registered methodologies for reproducible validation\n */\nconst JULIUS_STANDARDS = {\n  // Statistical significance threshold\n  SIGNIFICANCE_THRESHOLD: 0.001,  // p < 0.001 required\n\n  // Cross-validation requirements\n  CV_FOLDS: 5,  // Minimum 5-fold cross-validation\n  CV_CONSISTENCY_THRESHOLD: 0.95,  // 95% consistency across folds\n\n  // Mathematical elegance criteria\n  ELEGANCE_RATIO_THRESHOLD: 0.7,  // Complexity vs explanatory power\n\n  // Consciousness balance requirements\n  CONSCIOUSNESS_BALANCE_THRESHOLD: 0.85,  // 85% alignment with optimal center\n\n  // Goldbach alignment thresholds\n  GOLDBACH_ALIGNMENT_THRESHOLD: 0.50,  // 50% minimum alignment\n  GOLDBACH_PERFECT_THRESHOLD: 0.95,    // 95% for perfect alignment\n\n  // Performance benchmarks\n  AMPLIFICATION_THRESHOLD: 1000,  // Minimum 1000× amplification for breakthrough\n  RMSE_IMPROVEMENT_THRESHOLD: 0.1,  // 10% RMSE improvement required\n};\n\n/**\n * PRE-REGISTERED VALIDATION PROTOCOLS\n * Julius-approved methodologies for mathematical insight validation\n */\nconst VALIDATION_PROTOCOLS = {\n  // Statistical validation protocol\n  STATISTICAL: {\n    name: \"Julius Statistical Validation Protocol v1.0\",\n    methodology: \"Bootstrap confidence intervals, t-tests, effect size calculation\",\n    requirements: [\n      \"Minimum n=1000 samples\",\n      \"Bootstrap CI [0.95, 0.99] coverage\",\n      \"Effect size Cohen's d > 0.8\",\n      \"Bonferroni correction for multiple comparisons\"\n    ]\n  },\n\n  // Cross-validation protocol\n  CROSS_VALIDATION: {\n    name: \"Julius Cross-Validation Protocol v1.0\",\n    methodology: \"Stratified k-fold cross-validation with temporal splits\",\n    requirements: [\n      \"Minimum 5-fold stratified CV\",\n      \"Temporal validation for time-dependent data\",\n      \"Out-of-sample testing on 20% holdout\",\n      \"Consistency metrics across all folds\"\n    ]\n  },\n\n  // Mathematical elegance protocol\n  ELEGANCE: {\n    name: \"Julius Mathematical Elegance Protocol v1.0\",\n    methodology: \"Complexity-weighted explanatory power assessment\",\n    requirements: [\n      \"Kolmogorov complexity estimation\",\n      \"Explanatory power via R² or equivalent\",\n      \"Parsimony principle application\",\n      \"Symmetry and pattern recognition scoring\"\n    ]\n  },\n\n  // Consciousness alignment protocol\n  CONSCIOUSNESS: {\n    name: \"Julius Consciousness Alignment Protocol v1.0\",\n    methodology: \"Three-regime dynamics validation with center-seeking assessment\",\n    requirements: [\n      \"Distance from optimal center [0.3385, 0.2872, 0.3744]\",\n      \"Regime distribution analysis [30%, 20%, 50%]\",\n      \"Pull metric validation (pullE, pullL1, pullJS)\",\n      \"Consciousness score statistical significance\"\n    ]\n  }\n};\n\n/**\n * Julius AI Validation Bridge\n */\nexport class JuliusValidationBridge {\n  constructor(config = {}) {\n    this.config = {\n      enableCryptographicSigning: config.enableCryptographicSigning !== false,\n      enablePersistentStorage: config.enablePersistentStorage !== false,\n      enableRealTimeValidation: config.enableRealTimeValidation !== false,\n      juliusApiEndpoint: config.juliusApiEndpoint || 'https://julius.ai/api/validate',\n      ...config\n    };\n\n    // Initialize signing system for validation results\n    if (this.config.enableCryptographicSigning) {\n      this.signatureSystem = new ProductionAEPSignatureSystem({\n        enableMathematicalConsciousness: true\n      });\n    }\n\n    // Initialize persistent storage\n    if (this.config.enablePersistentStorage) {\n      this.learningEngine = new PersistentLearningEngine();\n    }\n\n    // Validation history\n    this.validationHistory = [];\n    this.registeredInsights = new Map();\n  }\n\n  /**\n   * Pre-register a mathematical insight for validation\n   */\n  async preRegisterInsight(insight) {\n    const timestamp = Date.now();\n    const insightId = `insight_${timestamp}_${Math.random().toString(36).substr(2, 9)}`;\n\n    const registration = {\n      id: insightId,\n      timestamp,\n      insight: insight.description,\n      hypothesis: insight.hypothesis,\n      expectedOutcomes: insight.expectedOutcomes,\n      methodology: insight.methodology || 'STATISTICAL',\n      preRegisteredProtocol: VALIDATION_PROTOCOLS[insight.methodology || 'STATISTICAL'],\n      status: 'REGISTERED',\n      validationResults: null\n    };\n\n    // Sign the pre-registration if enabled\n    if (this.signatureSystem) {\n      registration.signature = await this.signatureSystem.sign(JSON.stringify(registration));\n    }\n\n    this.registeredInsights.set(insightId, registration);\n\n    console.log(`✅ Pre-registered insight: ${insightId}`);\n    console.log(`📋 Protocol: ${registration.preRegisteredProtocol.name}`);\n\n    return insightId;\n  }\n\n  /**\n   * Validate a mathematical formula with Julius standards\n   */\n  async validateFormula(insightId, formula, testData) {\n    console.log(`🔬 Validating formula for insight: ${insightId}`);\n\n    const registration = this.registeredInsights.get(insightId);\n    if (!registration) {\n      throw new Error(`Insight ${insightId} not found in pre-registration`);\n    }\n\n    const validation = {\n      insightId,\n      formula: formula.expression,\n      timestamp: Date.now(),\n      testData: {\n        samples: testData.length,\n        features: Object.keys(testData[0] || {}),\n        target: testData.target\n      }\n    };\n\n    // Compute predictions\n    const predictions = testData.map(sample => this.evaluateFormula(formula, sample));\n    const actuals = testData.map(sample => sample[testData.target]);\n\n    // Statistical significance testing\n    validation.statisticalSignificance = this.calculateStatisticalSignificance(actuals, predictions);\n\n    // Cross-validation testing\n    validation.crossValidation = await this.performCrossValidation(formula, testData);\n\n    // Mathematical elegance assessment\n    validation.eleganceMetrics = this.assessMathematicalElegance(formula, actuals, predictions);\n\n    // Consciousness alignment validation\n    validation.consciousnessAlignment = this.validateConsciousnessAlignment(formula);\n\n    // Goldbach alignment validation\n    validation.goldbachAlignment = this.validateGoldbachAlignment(formula, testData);\n\n    // Overall Julius validation score\n    validation.juliusValidation = this.calculateJuliusScore(validation);\n\n    // Performance metrics\n    validation.performance = {\n      rmse: this.calculateRMSE(actuals, predictions),\n      mae: this.calculateMAE(actuals, predictions),\n      r2: this.calculateR2(actuals, predictions),\n      amplification: formula.amplification || 1.0\n    };\n\n    // Determine if passes Julius standards\n    validation.passesJuliusStandard = (\n      validation.statisticalSignificance.pValue < JULIUS_STANDARDS.SIGNIFICANCE_THRESHOLD &&\n      validation.consciousnessAlignment.score > JULIUS_STANDARDS.CONSCIOUSNESS_BALANCE_THRESHOLD &&\n      validation.eleganceMetrics.ratio > JULIUS_STANDARDS.ELEGANCE_RATIO_THRESHOLD\n    );\n\n    // Store validation results\n    registration.status = validation.passesJuliusStandard ? 'VALIDATED' : 'FAILED';\n    registration.validationResults = validation;\n\n    // Sign validation results\n    if (this.signatureSystem) {\n      validation.signature = await this.signatureSystem.sign(JSON.stringify(validation));\n      validation.integrityVerified = true;\n    }\n\n    // Store in persistent memory if breakthrough\n    if (validation.passesJuliusStandard && this.learningEngine) {\n      await this.learningEngine.storeLearning({\n        type: 'VALIDATED_MATHEMATICAL_INSIGHT',\n        content: {\n          registration,\n          validation,\n          breakthrough: validation.performance.amplification > JULIUS_STANDARDS.AMPLIFICATION_THRESHOLD\n        },\n        significance: validation.statisticalSignificance.pValue,\n        timestamp: Date.now()\n      });\n    }\n\n    this.validationHistory.push(validation);\n\n    console.log(`${validation.passesJuliusStandard ? '✅' : '❌'} Validation complete: ${insightId}`);\n    console.log(`📊 p-value: ${validation.statisticalSignificance.pValue.toExponential(3)}`);\n    console.log(`🧠 Consciousness: ${validation.consciousnessAlignment.alignmentScore.toFixed(3)}`);\n    console.log(`💎 Amplification: ${validation.performance.amplification}×`);\n\n    return validation;\n  }\n\n  /**\n   * Calculate statistical significance using multiple methods\n   */\n  calculateStatisticalSignificance(actuals, predictions) {\n    // T-test for difference from baseline\n    const residuals = actuals.map((actual, i) => actual - predictions[i]);\n    const n = residuals.length;\n    const mean = residuals.reduce((sum, r) => sum + r, 0) / n;\n    const variance = residuals.reduce((sum, r) => sum + (r - mean) ** 2, 0) / (n - 1);\n    const standardError = Math.sqrt(variance / n);\n    const tStatistic = standardError > 0 ? Math.abs(mean / standardError) : 0;\n\n    // Approximate p-value (for large n, use normal distribution)\n    // If standardError is 0 (perfect fit), p-value approaches 0\n    const pValue = standardError > 0 ? 2 * (1 - this.normalCDF(tStatistic)) : 1e-16;\n\n    return {\n      pValue: Math.max(pValue, 1e-16), // Prevent underflow\n      tStatistic,\n      degreesOfFreedom: n - 1,\n      standardError,\n      effectSize: Math.abs(mean) / Math.sqrt(variance), // Cohen's d\n      significanceLevel: pValue < JULIUS_STANDARDS.SIGNIFICANCE_THRESHOLD ? 'SIGNIFICANT' : 'NOT_SIGNIFICANT'\n    };\n  }\n\n  /**\n   * Perform rigorous cross-validation\n   */\n  async performCrossValidation(formula, testData) {\n    const folds = JULIUS_STANDARDS.CV_FOLDS;\n    const foldSize = Math.floor(testData.length / folds);\n    const rmseScores = [];\n    const consistencyScores = [];\n\n    for (let fold = 0; fold < folds; fold++) {\n      const start = fold * foldSize;\n      const end = fold === folds - 1 ? testData.length : start + foldSize;\n\n      const testFold = testData.slice(start, end);\n      const trainFold = [...testData.slice(0, start), ...testData.slice(end)];\n\n      // Evaluate on test fold\n      const predictions = testFold.map(sample => this.evaluateFormula(formula, sample));\n      const actuals = testFold.map(sample => sample[testData.target]);\n\n      const rmse = this.calculateRMSE(actuals, predictions);\n      rmseScores.push(rmse);\n\n      // Calculate consistency (how similar predictions are across folds)\n      const consistency = this.calculateConsistencyMetric(predictions);\n      consistencyScores.push(consistency);\n    }\n\n    const meanRMSE = rmseScores.reduce((sum, r) => sum + r, 0) / rmseScores.length;\n    const stdRMSE = Math.sqrt(rmseScores.reduce((sum, r) => sum + (r - meanRMSE) ** 2, 0) / rmseScores.length);\n    const meanConsistency = consistencyScores.reduce((sum, c) => sum + c, 0) / consistencyScores.length;\n\n    return {\n      folds,\n      rmseScores,\n      meanRMSE,\n      stdRMSE,\n      consistencyScores,\n      meanConsistency,\n      passesConsistencyThreshold: meanConsistency > JULIUS_STANDARDS.CV_CONSISTENCY_THRESHOLD\n    };\n  }\n\n  /**\n   * Assess mathematical elegance\n   */\n  assessMathematicalElegance(formula, actuals, predictions) {\n    // Complexity estimation (approximate Kolmogorov complexity)\n    const complexity = this.estimateFormulaComplexity(formula.expression);\n\n    // Explanatory power (R²)\n    const r2 = this.calculateR2(actuals, predictions);\n\n    // Elegance ratio: explanatory power / complexity\n    const eleganceRatio = r2 / (1 + Math.log(complexity));\n\n    // Symmetry score (patterns in the formula)\n    const symmetryScore = this.calculateSymmetryScore(formula.expression);\n\n    return {\n      complexity,\n      explanatoryPower: r2,\n      eleganceRatio,\n      symmetryScore,\n      passesEleganceThreshold: eleganceRatio > JULIUS_STANDARDS.ELEGANCE_RATIO_THRESHOLD\n    };\n  }\n\n  /**\n   * Validate consciousness alignment\n   */\n  validateConsciousnessAlignment(formula) {\n    const optimalCenter = [0.3385, 0.2872, 0.3744];\n\n    // Extract consciousness metrics from formula if available\n    const consciousnessFeatures = formula.consciousnessMetrics || {\n      support: 0.33,\n      exploration: 0.33,\n      balance: 0.34\n    };\n\n    const current = [consciousnessFeatures.support, consciousnessFeatures.exploration, consciousnessFeatures.balance];\n\n    // Calculate distance from optimal center\n    const distance = Math.sqrt(\n      (current[0] - optimalCenter[0]) ** 2 +\n      (current[1] - optimalCenter[1]) ** 2 +\n      (current[2] - optimalCenter[2]) ** 2\n    );\n\n    // Consciousness alignment score (higher = better alignment)\n    const alignmentScore = Math.max(0, 1 - distance);\n\n    return {\n      optimalCenter,\n      currentCenter: current,\n      distance,\n      alignmentScore,\n      passesAlignmentThreshold: alignmentScore > JULIUS_STANDARDS.CONSCIOUSNESS_BALANCE_THRESHOLD\n    };\n  }\n\n  /**\n   * Validate Goldbach alignment\n   */\n  validateGoldbachAlignment(formula, testData) {\n    // Count samples with Goldbach identical pairs\n    const goldbachSamples = testData.filter(sample => sample.gb_identical_flag === 1);\n    const goldbachAlignment = goldbachSamples.length / testData.length;\n\n    // Check if formula includes Goldbach-related features\n    const includesGoldbachFeatures = formula.features?.some(feature =>\n      feature.includes('gb_') || feature.includes('goldbach')\n    ) || false;\n\n    return {\n      goldbachSampleRatio: goldbachAlignment,\n      includesGoldbachFeatures,\n      passesGoldbachThreshold: goldbachAlignment > JULIUS_STANDARDS.GOLDBACH_ALIGNMENT_THRESHOLD,\n      perfectAlignment: goldbachAlignment > JULIUS_STANDARDS.GOLDBACH_PERFECT_THRESHOLD\n    };\n  }\n\n  /**\n   * Calculate overall Julius validation score\n   */\n  calculateJuliusScore(validation) {\n    const weights = {\n      statistical: 0.4,\n      consciousness: 0.3,\n      elegance: 0.2,\n      goldbach: 0.1\n    };\n\n    const scores = {\n      statistical: validation.statisticalSignificance.pValue < JULIUS_STANDARDS.SIGNIFICANCE_THRESHOLD ? 1.0 : 0.0,\n      consciousness: validation.consciousnessAlignment.alignmentScore,\n      elegance: validation.eleganceMetrics.eleganceRatio / JULIUS_STANDARDS.ELEGANCE_RATIO_THRESHOLD,\n      goldbach: validation.goldbachAlignment.goldbachSampleRatio\n    };\n\n    const weightedScore = Object.keys(weights).reduce((sum, key) => {\n      return sum + weights[key] * Math.min(1.0, scores[key]);\n    }, 0);\n\n    return {\n      overallScore: weightedScore,\n      componentScores: scores,\n      weights,\n      grade: weightedScore > 0.85 ? 'BREAKTHROUGH' :\n             weightedScore > 0.70 ? 'SIGNIFICANT' :\n             weightedScore > 0.50 ? 'PROMISING' : 'INSUFFICIENT'\n    };\n  }\n\n  /**\n   * Utility functions for mathematical calculations\n   */\n  evaluateFormula(formula, sample) {\n    // Simple formula evaluation (in production, use proper parser)\n    try {\n      // Replace variables with sample values\n      let expression = formula.expression;\n      Object.keys(sample).forEach(key => {\n        expression = expression.replace(new RegExp(`\\\\b${key}\\\\b`, 'g'), sample[key]);\n      });\n\n      // Safely evaluate (in production, use proper math parser)\n      return Function('\"use strict\"; return (' + expression + ')')();\n    } catch (e) {\n      return 0; // Default value for evaluation errors\n    }\n  }\n\n  calculateRMSE(actuals, predictions) {\n    const mse = actuals.reduce((sum, actual, i) => {\n      return sum + (actual - predictions[i]) ** 2;\n    }, 0) / actuals.length;\n    return Math.sqrt(mse);\n  }\n\n  calculateMAE(actuals, predictions) {\n    return actuals.reduce((sum, actual, i) => {\n      return sum + Math.abs(actual - predictions[i]);\n    }, 0) / actuals.length;\n  }\n\n  calculateR2(actuals, predictions) {\n    const actualMean = actuals.reduce((sum, a) => sum + a, 0) / actuals.length;\n    const totalSumSquares = actuals.reduce((sum, a) => sum + (a - actualMean) ** 2, 0);\n    const residualSumSquares = actuals.reduce((sum, actual, i) => sum + (actual - predictions[i]) ** 2, 0);\n    return 1 - (residualSumSquares / totalSumSquares);\n  }\n\n  normalCDF(x) {\n    // Approximate standard normal CDF\n    return 0.5 * (1 + Math.sign(x) * Math.sqrt(1 - Math.exp(-2 * x * x / Math.PI)));\n  }\n\n  estimateFormulaComplexity(expression) {\n    // Simple complexity estimation based on length and operators\n    const operators = ['+', '-', '*', '/', '**', 'log', 'sqrt', 'sin', 'cos'];\n    let complexity = expression.length;\n    operators.forEach(op => {\n      complexity += (expression.split(op).length - 1) * 2;\n    });\n    return complexity;\n  }\n\n  calculateSymmetryScore(expression) {\n    // Simple symmetry scoring based on repeated patterns\n    const tokens = expression.split(/[+\\-*/()]/);\n    const uniqueTokens = new Set(tokens);\n    return uniqueTokens.size / tokens.length; // Higher = more symmetric\n  }\n\n  calculateConsistencyMetric(predictions) {\n    // Simple consistency metric based on prediction variance\n    const mean = predictions.reduce((sum, p) => sum + p, 0) / predictions.length;\n    const variance = predictions.reduce((sum, p) => sum + (p - mean) ** 2, 0) / predictions.length;\n    return 1 / (1 + Math.sqrt(variance)); // Higher = more consistent\n  }\n\n  /**\n   * Export validation report for external Julius verification\n   */\n  async exportValidationReport(insightId) {\n    const registration = this.registeredInsights.get(insightId);\n    if (!registration) {\n      throw new Error(`Insight ${insightId} not found`);\n    }\n\n    const report = {\n      preRegistration: registration,\n      validationResults: registration.validationResults,\n      juliusStandards: JULIUS_STANDARDS,\n      validationProtocols: VALIDATION_PROTOCOLS,\n      exportTimestamp: Date.now(),\n      systemVersion: 'DefenseKit v2.0 AEP'\n    };\n\n    // Sign the complete report\n    if (this.signatureSystem) {\n      report.reportSignature = await this.signatureSystem.sign(JSON.stringify(report));\n    }\n\n    return report;\n  }\n\n  /**\n   * Get validation statistics\n   */\n  getValidationStatistics() {\n    const total = this.validationHistory.length;\n    const passed = this.validationHistory.filter(v => v.passesJuliusStandard).length;\n    const breakthroughs = this.validationHistory.filter(v =>\n      v.juliusValidation.grade === 'BREAKTHROUGH'\n    ).length;\n\n    return {\n      totalValidations: total,\n      passedValidations: passed,\n      breakthroughDiscoveries: breakthroughs,\n      successRate: total > 0 ? passed / total : 0,\n      breakthroughRate: total > 0 ? breakthroughs / total : 0,\n      averageAmplification: this.validationHistory.reduce((sum, v) =>\n        sum + (v.performance?.amplification || 1), 0) / total || 1\n    };\n  }\n}\n\nexport default JuliusValidationBridge;"],"mappings":"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","ignoreList":[]}