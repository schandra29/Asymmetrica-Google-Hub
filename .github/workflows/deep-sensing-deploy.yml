# JULES-10: Deployment & Infrastructure
# GitHub Actions CI/CD Pipeline for Deep-Sensing Studio

name: Deploy Deep-Sensing Studio

on:
  push:
    branches:
      - main
    paths:
      - 'apps/deep-sensing-studio/**'
      - '.github/workflows/deep-sensing-deploy.yml'
  workflow_dispatch: # Allows manual triggering

jobs:
  # Job to lint the code to ensure quality standards
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/deep-sensing-studio/package-lock.json

      - name: Install dependencies
        run: npm --prefix apps/deep-sensing-studio ci

      - name: Run ESLint
        run: npm --prefix apps/deep-sensing-studio run lint # Placeholder command

  # Job to run tests before deployment
  test:
    name: Run Contract Tests
    runs-on: ubuntu-latest
    needs: lint # Depends on the lint job succeeding
    services:
      # Spin up a PostgreSQL container for testing
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/deep-sensing-studio/package-lock.json

      - name: Install dependencies
        run: npm --prefix apps/deep-sensing-studio ci

      - name: Run contract tests
        run: npm --prefix apps/deep-sensing-studio run test:contract # Placeholder command
        env:
          DATABASE_URL: "postgresql://testuser:testpassword@localhost:5432/testdb"
          # Add other necessary test environment variables here
          CI: true

  # Job to deploy the application to Render.com
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: test # Depends on the test job succeeding
    if: github.ref == 'refs/heads/main' # Only run on the main branch
    steps:
      - name: Trigger Render Deployment
        # This step uses a deploy hook URL, which you must create in the Render.com
        # dashboard for the 'deep-sensing-studio-api' service.
        # Store the hook URL as a secret in your GitHub repository settings.
        run: |
          echo "Triggering Render deployment..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}"
          echo "Deployment triggered."