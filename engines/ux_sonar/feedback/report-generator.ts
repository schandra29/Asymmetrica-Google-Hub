import { writeFileSync, mkdirSync } from 'fs';
import { join } from 'path';

export class ReportGenerator {

  generateMarkdownReport(critique: any, telemetry: any, route: string): string {
    const timestamp = new Date().toISOString();

    return `# UX Sonar Report - ${route}

**Generated:** ${timestamp}
**Regime:** ${telemetry.asymmetrica.regime}
**Overall Score:** ${critique.metrics.overallScore}/100

## Summary

${critique.summary}

## Metrics

| Metric | Value | Target |
|--------|-------|--------|
| Average FPS | ${telemetry.layers.frontend?.metrics.fps || 'N/A'} | 60 |
| Cumulative Layout Shift | ${telemetry.layers.frontend?.metrics.cls || 'N/A'} | <0.1 |
| Long Tasks | ${telemetry.layers.frontend?.metrics.longTasks || 0}ms | <100ms |
| Smoothness Index | ${telemetry.metrics.smoothnessIndex.toFixed(2)} | >50 |
| Energy Efficiency | ${telemetry.metrics.energyEfficiency.toFixed(2)} | >20 |

## Issues Found

${critique.issues.length === 0 ? '*No issues detected*' : ''}

${critique.issues.map((issue: any, i: number) => `
### ${i + 1}. ${issue.type} (${issue.severity})

**Description:** ${issue.description}

**Suggestion:** ${issue.suggestion}

${issue.codeExample ? `**Code Example:**
\`\`\`javascript
${issue.codeExample}
\`\`\`` : ''}
`).join('\n')}

## Recommendations

${critique.recommendations.map((rec: string) => `- ${rec}`).join('\n')}

---

*Generated by UX Sonar - AI Vision Engine*
`;
  }

  saveReport(content: string, route: string) {
    const reportDir = join(process.cwd(), 'tests/ux-sonar/reports');

    try {
      mkdirSync(reportDir, { recursive: true });
    } catch (e) {
      // Directory might already exist
    }

    const filename = route.replace(/\//g, '_') || 'root';
    const timestamp = Date.now();
    const filepath = join(reportDir, `${filename}_${timestamp}.md`);

    writeFileSync(filepath, content);
    console.log(`[Report] Saved to: ${filepath}`);

    return filepath;
  }

  generateJSONReport(critique: any, telemetry: any, route: string) {
    return {
      route,
      timestamp: new Date().toISOString(),
      critique,
      telemetry,
      baseline: telemetry.baseline || null
    };
  }
}
